#include <stdio.h>
#include <stdlib.h>
#include <math.h>



void merge(int* v, int tamV, int* e, int tamE, int* d, int tamD){
    // Criação dos indices que irão controlar a posição do atual valor de cada vetor 
    
    
    int indexV = 0;
    int indexE = 0;
    int indexD = 0;
    
    // Vamos unir os vetores da direita e esquerda até algum deles chegar no fim
    
    while(indexE < tamE && indexD < tamD){
        if(e[indexE] <= d[indexD]){
            v[indexV] = e[indexE];
            indexE++;
        } else{
            v[indexV] = d[indexD];
            indexD++;
        }
        indexV++;
    }
    
    //Precisamos terminar de preencher o vetor que não chegou no fim 
    
    // caso tenha sido o da esquerda 
    
    while(indexE < tamE){
        v[indexV] = e[indexE];
        indexE++;
        indexV++;
    }
    
    // caso tenha sido o da direita
    
    while(indexD < tamD){
        v[indexV] = d[indexD];
        indexD++;
        indexV++;
    }
}


void mergeSort(int* v, int tamV){
    
    // Enquanto o tamanho do vetor principal for maior que 1 vamos continuar chamando a função
    // essa parte é importante na recursividade
    
    if(tamV>1){
        
        // Pegar o meio do vetor
        
        int meio = tamV/2;
        
        // tamanho do vetor da esquerda
        int tamV1 = meio;
        // preencher o vetor da esquerda
        int* v1 = (int*)malloc(tamV1*sizeof(int));
        for(int i = 0; i < meio; i++){
            v1[i] = v[i];
        }
        // tamanho do vetor da direita
        int tamV2 = tamV-meio;
        // preencher o vetor da direita 
        int* v2 = (int*)malloc(tamV2*sizeof(int));
        for(int i = meio; i < tamV; i++){
            v2[i-meio] = v[i];
        }
        
        //chamando recursivamente as funções 
        
        mergeSort(v1,tamV1);
        mergeSort(v2,tamV2);
        merge(v,tamV,v1,tamV1,v2,tamV2);
        
        free(v1);
        free(v2);
    }
}


int main(){
    
    
    int v[] = {7, 6, 5, 4, 3, 3, 2, 1};
    int v_size = sizeof(v)/sizeof(v[0]);
    for(int i = 0;i<v_size;i++){
        printf("%d ", v[i]);
    }
    
    printf("\n");
    mergeSort(v,v_size);
    for(int i = 0;i<v_size;i++){
        printf("%d ", v[i]);
    }
    return 0;
}
